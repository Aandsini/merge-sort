#include <iostream>
using namespace std;

// Fungsi untuk menggabungkan dua bagian dari array
void merge(int arr[], int left, int middle, int right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;

    // Buat array temporari
    int Left[n1], Right[n2];

    // Salin data ke array temporari Left[] dan Right[]
    for (int i = 0; i < n1; i++)
        Left[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        Right[j] = arr[middle + 1 + j];

    // Gabungkan array temporari kembali ke arr[left..right]
    int i = 0; // Indeks awal untuk array subbagian kiri
    int j = 0; // Indeks awal untuk array subbagian kanan
    int k = left; // Indeks awal untuk array hasil gabungan
    while (i < n1 && j < n2) {
        if (Left[i] <= Right[j]) {
            arr[k] = Left[i];
            i++;
        } else {
            arr[k] = Right[j];
            j++;
        }
        k++;
    }

    // Salin elemen yang tersisa dari Left[], jika ada
    while (i < n1) {
        arr[k] = Left[i];
        i++;
        k++;
    }

    // Salin elemen yang tersisa dari Right[], jika ada
    while (j < n2) {
        arr[k] = Right[j];
        j++;
        k++;
    }
}

// Fungsi rekursif untuk melakukan merge sort pada array
void mergeSort(int arr[], int left, int right) {
    if (left >= right)
        return;
    int middle = left + (right - left) / 2;
    mergeSort(arr, left, middle); // Panggil mergeSort untuk bagian kiri
    mergeSort(arr, middle + 1, right); // Panggil mergeSort untuk bagian kanan
    merge(arr, left, middle, right); // Gabungkan dua bagian yang sudah diurutkan
}

// Fungsi untuk menampilkan array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Fungsi utama
int main() {
    int arr[] = {4, 7, 3, 9, 2, 5, 11, 21};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    cout << "Array sebelum sorting: \n";
    printArray(arr, arr_size);

    mergeSort(arr, 0, arr_size - 1);

    cout << "\nArray setelah sorting: \n";
    printArray(arr, arr_size);

    return 0;
}
